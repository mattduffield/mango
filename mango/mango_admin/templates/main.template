from dotenv import load_dotenv
load_dotenv()
from fastapi import FastAPI, APIRouter, Depends, Request
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse, RedirectResponse, FileResponse
from starlette.middleware.sessions import SessionMiddleware
import os
import uvicorn
from mango.core.views import (
  CreateView,
  UpdateView,
  DeleteView, 
  ListView, 
  get_controller,
  GenericListView,
)
from mango.core.app_loader import import_apps
from mango.db import api
from mango.auth import auth
from mango.auth.models import NotAuthenticatedException
from mango.hooks import views as hooks
from mango.wf import views as wf
from mango.qb import views as qb
import settings
from settings import (
    SESSION_SECRET_KEY,
    DATABASE_CLUSTER,
    DATABASE_NAME,
    DATABASE_PASSWORD,
    DATABASE_USERNAME,
    MAILGUN_API_KEY,
    MAILGUN_FROM_BLOCK,
    MAILGUN_URL,
    manager,
    templates,
    set_host,
)
from entities.views import (
    EntityCreateView,
    EntityUpdateView,
    EntityDeleteView,
    EntityListView,
)
from products.views import (
    ProductCreateView,
    ProductUpdateView,
    ProductDeleteView,
    ProductListView,
)

app = FastAPI()
manager.useRequest(app)
set_host(app)

@app.exception_handler(NotAuthenticatedException)
def auth_exception_handler(request: Request, exc: NotAuthenticatedException):
    redirect_from = request.url.path
    if request.url.query:
        redirect_from = f'{redirect_from}?{request.url.query}'
    redirect_to = f'/auth/login?next={redirect_from}'
    return RedirectResponse(url=redirect_to)

@app.middleware('http')
async def add_htmx_request(request: Request, call_next):
    if request.headers.get('hx-request'):
        request.state.htmx = True
    else:
        request.state.htmx = False
    response = await call_next(request)
    return response

def main():
    configure(dev_mode=True)
    uvicorn.run(app, host='127.0.0.1', port=8010, debug=True)

def configure(dev_mode: bool):
    cwd = os.getcwd()
    print(f'cwd: {cwd}')
    print(f'dev_mode: {dev_mode}')
    configure_routes()

# def import_dynamic(name):
#     importlib.import_module(name)
#     # script = f'import {name}'
#     # exec(script, globals(), locals())

def configure_routes():
    app.mount('/static', StaticFiles(directory='static'), name='static')
    app.include_router(auth.router)
    app.include_router(api.router)
    app.include_router(hooks.router)
    app.include_router(wf.router)
    app.include_router(qb.router)
    app.include_router(LandingView.router())
    app.include_router(EntityCreateView.router())
    app.include_router(EntityUpdateView.router())
    app.include_router(EntityDeleteView.router())
    app.include_router(EntityListView.router())
    app.include_router(ProductCreateView.router())
    app.include_router(ProductUpdateView.router())
    app.include_router(ProductDeleteView.router())
    app.include_router(ProductListView.router())
    # import_dynamic('user__c')
    import_apps()

@app.get('/ms17708825.txt')
async def domain_check():
    return FileResponse('ms17708825.txt')

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
app.add_middleware(
    SessionMiddleware,
    secret_key=SESSION_SECRET_KEY
)

# Remove this once you have your own routes developed
# @app.get('/', response_class=HTMLResponse)
# def index():
#     return """
#     <html>
#         <head>
#             <title>Mango</title>
#         </head>
#         <body>
#             <h1>Congratulations! Your server is ready...</h1>
#         </body>
#     </html>
#     """

from mango.core.views import get_controller, StaticView

landing_controller = get_controller()

@landing_controller.resource()
class LandingView(StaticView):

  @landing_controller.route.get('/', response_class=HTMLResponse, name='landing-page')
  async def get(self, request: Request):
    return await super().get(request=request)

  def get_template_name(self):
    if self.request.state.htmx:
      return 'partials/landing.html'
    else:
      return 'landing.html'




if __name__ == '__main__':
    main()
else:
    configure(dev_mode=False)