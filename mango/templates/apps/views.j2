import datetime
from dateutil import parser
import json
from bson import json_util, ObjectId
from fastapi import APIRouter, Depends, Request, status
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi_router_controller import Controller
from starlette_wtf import StarletteForm
from starlette.datastructures import MultiDict
from wtforms import Form
from typing import Dict, List, Optional, Sequence, Set, Tuple, Union
from mango.auth.models import Credentials
from mango.auth.auth import can
from mango.core.models import Action, Role, Model, ModelRecordType, ModelField, PageLayout, ListLayout, Tab, App
from mango.core.fields import QuerySelectField, QuerySelectMultipleField, StringField2
from mango.core.forms import get_string_form, ActionForm, RoleForm, ModelForm, ModelRecordTypeForm, ModelFieldForm, PageLayoutForm, ListLayoutForm, TabForm, AppForm, KeyValueForm
from mango.core.views import BaseView, StaticView
from mango.db.models import datetime_parser, json_from_mongo, Query, QueryOne, Count, InsertOne, InsertMany, Update, UpdateOne, UpdateMany, Delete, DeleteOne, DeleteMany, BulkWrite, AggregatePipeline
from mango.db.api import find, find_one, run_pipeline, delete, delete_one, update_one, insert_one
import settings
from settings import manager, templates, DATABASE_NAME


def get_router(prefix: str = '', tags: List[str] = ['Views']):
  return APIRouter(
   prefix = prefix,
    tags = tags
  )

def get_controller(prefix: str = '', tags: List[str] = ['Views']):
  router = get_router(prefix=prefix, tags=tags)
  controller = Controller(router)
  return controller

{{ra.model.name}}_controller = get_controller(tags=['{{ra.model.label}} Views'])
@{{ra.model.name}}_controller.resource()
class {{ra.model.label}}View(BaseView):
  model_class = {{ra.model.label}}
  form_class = {{ra.model.label}}Form

  def __init__(self):
    super().__init__()

  @{{ra.model.name}}_controller.route.get('/{{ra.model.name}}', response_class=HTMLResponse, name='{{ra.model.name}}-list')
  async def get_list(self, request: Request, search: str = '', is_modal: bool=False, user=Depends(manager)):
    return await super().get(request=request, get_type='get_list', search=search, is_modal=is_modal)

  @{{ra.model.name}}_controller.route.get('/{{ra.model.name}}/create', response_class=HTMLResponse, name='{{ra.model.name}}-create')
  async def get_create(self, request: Request, is_modal: bool=False, user=Depends(manager)):
    return await super().get(request=request, get_type='get_create', is_modal=is_modal)

  @{{ra.model.name}}_controller.route.post('/{{ra.model.name}}/create', response_class=HTMLResponse, name='{{ra.model.name}}-create')
  async def post_create(self, request: Request, is_modal: bool=False, user=Depends(manager)):
    return await super().post(request=request, post_type='post_create', is_modal=is_modal)

  @{{ra.model.name}}_controller.route.get('/{{ra.model.name}}/{_id}', response_class=HTMLResponse, name='{{ra.model.name}}-update')
  async def get_update(self, request: Request, _id: str = '', is_modal: bool=False, user=Depends(manager)):
    return await super().get(request=request, get_type='get_update', _id=_id, is_modal=is_modal)

  @{{ra.model.name}}_controller.route.post('/{{ra.model.name}}/{_id}', response_class=HTMLResponse, name='{{ra.model.name}}-update')
  async def post_update(self, request: Request, _id: str = '', is_modal: bool=False, user=Depends(manager)):
    return await super().post(request=request, post_type='post_update', _id=_id, is_modal=is_modal)

  @{{ra.model.name}}_controller.route.get('/{{ra.model.name}}/{_id}/delete', response_class=HTMLResponse, name='{{ra.model.name}}-delete')
  async def get_delete(self, request: Request, _id: str = '', is_modal: bool=False, user=Depends(manager)):
    return await super().get(request=request, get_type='get_delete', _id=_id, is_modal=is_modal)

  @{{ra.model.name}}_controller.route.post('/{{ra.model.name}}/{_id}/delete', response_class=HTMLResponse, name='{{ra.model.name}}-delete')
  async def post_delete(self, request: Request, _id: str = '', is_modal: bool=False, user=Depends(manager)):
    return await super().post(request=request, post_type='post_delete', _id=_id, is_modal=is_modal)


